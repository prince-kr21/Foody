Index: app/src/main/java/com/example/mealer_project/data/sources/actions/MealActions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.mealer_project.data.sources.actions;\n\nimport static android.content.ContentValues.TAG;\n\nimport static com.example.mealer_project.data.handlers.MealHandler.dbOperations.*;\nimport static com.example.mealer_project.data.sources.FirebaseCollections.*;\n\nimport android.util.Log;\n\nimport androidx.annotation.NonNull;\n\nimport com.example.mealer_project.app.App;\nimport com.example.mealer_project.data.entity_models.AddressEntityModel;\nimport com.example.mealer_project.data.entity_models.MealEntityModel;\nimport com.example.mealer_project.data.handlers.UserHandler;\nimport com.example.mealer_project.data.models.Address;\nimport com.example.mealer_project.data.models.Chef;\nimport com.example.mealer_project.data.models.meals.Meal;\nimport com.example.mealer_project.data.models.orders.ChefInfo;\nimport com.example.mealer_project.ui.screens.search.SearchMealItem;\nimport com.example.mealer_project.ui.screens.LoginScreen;\nimport com.example.mealer_project.utils.Preconditions;\nimport com.example.mealer_project.utils.Result;\nimport com.google.android.gms.tasks.OnCompleteListener;\nimport com.google.android.gms.tasks.OnFailureListener;\nimport com.google.android.gms.tasks.OnSuccessListener;\nimport com.google.android.gms.tasks.Task;\nimport com.google.firebase.firestore.DocumentReference;\nimport com.google.firebase.firestore.DocumentSnapshot;\nimport com.google.firebase.firestore.FirebaseFirestore;\nimport com.google.firebase.firestore.QueryDocumentSnapshot;\nimport com.google.firebase.firestore.QuerySnapshot;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class MealActions {\n\n    FirebaseFirestore database;\n\n    public MealActions(FirebaseFirestore database) {\n        this.database = database;\n    }\n\n\n    private void addChefMeal(String chefMealsId, Meal meal, String chefName, String chefAddress) {\n\n        Map<String, Object> databaseMeal = new HashMap<>();\n        databaseMeal.put(\"name\", meal.getName());\n        databaseMeal.put(\"chefID\", meal.getChefID());\n        databaseMeal.put(\"cuisineType\", meal.getCuisineType());\n        databaseMeal.put(\"mealType\", meal.getMealType());\n        databaseMeal.put(\"ingredients\", meal.getIngredients());\n        databaseMeal.put(\"allergens\", meal.getAllergens());\n        databaseMeal.put(\"description\", meal.getDescription());\n        databaseMeal.put(\"isOffered\", meal.isOffered());\n        databaseMeal.put(\"price\", meal.getPrice());\n        databaseMeal.put(\"keywords\", meal.getSearchMealItemKeywords(chefName, chefAddress));\n\n        database.collection(MEALS_COLLECTION)\n                .document(chefMealsId)\n                .collection(CHEF_MEALS_COLLECTION)\n                .add(databaseMeal)\n                .addOnSuccessListener(new OnSuccessListener<DocumentReference>() {\n                    @Override\n                    public void onSuccess(DocumentReference documentReference) {\n                        // update meal id\n                        meal.setMealID(documentReference.getId());\n                        Log.e(\"MEAL ID\", documentReference.getId());\n                        App.MEAL_HANDLER.handleActionSuccess(ADD_MEAL, meal);\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        App.MEAL_HANDLER.handleActionFailure(ADD_MEAL, \"Failed to add meal to chef in database: \" + e.getMessage());\n                    }\n                });\n    }\n\n    /**\n     * Add meal to list of meals in Firebase\n     * @param meal The meal to be added\n     */\n    public void addMeal(Meal meal) {\n\n        if (Preconditions.isNotNull(meal)) {\n            // confirm a Chef is logged in and get the chef\n            Chef chef;\n            try {\n                chef = (Chef) App.getUser();\n\n                // Add meal to chef's list in firebase\n                database.collection(MEALS_COLLECTION)   // top-level meals collection\n                        .whereEqualTo(MEALS_COLLECTION_CHEF_KEY, chef.getUserId()) // get meals document of the chef\n                        .get()\n                        .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n                            @Override\n                            public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                                if (task.isSuccessful()) {\n                                    // if chef currently doesn't have a meal\n                                    if (task.getResult() == null || task.getResult().isEmpty()) {\n                                        Log.e(\"addMeal\", \"Chef not in meals collection, adding to it\");\n                                        // add the chef first\n                                        Map<String, Object> mealsCollectionData = new HashMap<>();\n                                        mealsCollectionData.put(\"chef\", chef.getUserId());\n                                        database.collection(MEALS_COLLECTION)\n                                                .add(mealsCollectionData)\n                                                .addOnSuccessListener(new OnSuccessListener<DocumentReference>() {\n                                                @Override\n                                                public void onSuccess(DocumentReference documentReference) {\n                                                        addChefMeal(documentReference.getId(), meal, chef.getFirstName() + \" \" + chef.getLastName(), chef.getAddress().toString());\n                                                    }\n                                                })\n                                                    .addOnFailureListener(new OnFailureListener() {\n                                                        @Override\n                                                        public void onFailure(@NonNull Exception e) {\n                                                            App.MEAL_HANDLER.handleActionFailure(ADD_MEAL, \"Failed to add meal to chef in database: \" + e.getMessage());\n                                                        }\n                                                    });\n                                    } else {\n                                        for (QueryDocumentSnapshot document : task.getResult()) {\n                                            addChefMeal(document.getId(), meal, chef.getFirstName() + \" \" + chef.getLastName(), chef.getAddress().toString());\n                                        }\n                                    }\n                                } else {\n                                    App.MEAL_HANDLER.handleActionFailure(ADD_MEAL, \"Failed to add meal to chef in database\");\n                                    Log.d(\"addMeal\", \"Error getting chef's meals: \", task.getException());\n                                }\n                            }\n                        });\n\n            } catch (Exception e) {\n                App.MEAL_HANDLER.handleActionFailure(ADD_MEAL, \"Failed to add meal to chef in database: \" + e.getMessage());\n            }\n        }\n    }\n\n    /**\n     * Remove meal from searchable list of meals in Firebase\n     * @param mealId The mealId of meal to be removed\n     */\n    public void removeMeal(String mealId){\n\n        Chef chef;\n\n        try {\n            if (Preconditions.isNotNull(mealId)) {\n\n                chef = (Chef) App.getUser();\n\n                database.collection(MEALS_COLLECTION)   // top-level meals collection\n                        .whereEqualTo(MEALS_COLLECTION_CHEF_KEY, chef.getUserId()) // get meals document of the chef\n                        .get()\n                        .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n                            @Override\n                            public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                                if (task.isSuccessful()) {\n                                    for (QueryDocumentSnapshot document : task.getResult()) {\n\n                                        // Remove meal from chef's list in firebase\n                                        database.collection(MEALS_COLLECTION)\n                                                .document(document.getId())\n                                                .collection(CHEF_MEALS_COLLECTION)\n                                                .document(mealId)\n                                                .delete()\n                                                .addOnSuccessListener(new OnSuccessListener<Void>() {\n                                                    @Override\n                                                    public void onSuccess(Void aVoid) {\n                                                        App.MEAL_HANDLER.handleActionSuccess(REMOVE_MEAL, mealId);\n                                                    }\n                                                })\n                                                .addOnFailureListener(new OnFailureListener() {\n                                                    @Override\n                                                    public void onFailure(@NonNull Exception e) {\n                                                        App.MEAL_HANDLER.handleActionFailure(REMOVE_MEAL, \"Failed to remove meal in chef's list in Firebase: \" + e.getMessage());\n                                                    }\n                                                });\n                                    }\n                                } else {\n                                    App.MEAL_HANDLER.handleActionFailure(ADD_MEAL, \"Unable to get chef's meals: \" + task.getException());\n                                }\n                            }\n                        });\n\n            } else {\n                // if Preconditions fail\n                App.MEAL_HANDLER.handleActionFailure(REMOVE_MEAL, \"Invalid object value for meal\");\n            }\n        } catch (Exception e) {\n            App.MEAL_HANDLER.handleActionFailure(REMOVE_MEAL, \"Unable to get Chef instance: \" + e.getMessage());\n        }\n    }\n\n    /**\n     * Set isOffered property to true to a meal in a specific chef's list of meals in Firebase\n     * @param mealId The mealId of meal to be updated\n     */\n    public void addMealToOfferedList(String mealId){\n\n        if (Preconditions.isNotNull(mealId)) {\n            try {\n                // ensure a chef is logged in & get the chef instance\n                Chef chef = (Chef) App.getUser();\n                // Set isOffered to true in chef's meals in firebase\n                database.collection(MEALS_COLLECTION)   // top-level meals collection\n                        .whereEqualTo(MEALS_COLLECTION_CHEF_KEY, chef.getUserId()) // get meals document of the chef\n                        .get()\n                        .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n                            @Override\n                            public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                                if (task.isSuccessful()) {\n                                    for (QueryDocumentSnapshot document : task.getResult()) {\n\n                                        database.collection(MEALS_COLLECTION)\n                                                .document(document.getId())\n                                                .collection(CHEF_MEALS_COLLECTION)\n                                                .document(mealId)\n                                                .update(\"isOffered\", true)\n                                                .addOnSuccessListener(new OnSuccessListener<Void>() {\n                                                    @Override\n                                                    public void onSuccess(Void aVoid) {\n                                                        App.MEAL_HANDLER.handleActionSuccess(ADD_MEAL_TO_OFFERED_LIST, mealId);\n                                                    }\n                                                })\n                                                .addOnFailureListener(new OnFailureListener() {\n                                                    @Override\n                                                    public void onFailure(@NonNull Exception e) {\n                                                        App.MEAL_HANDLER.handleActionFailure(ADD_MEAL_TO_OFFERED_LIST, \"Failed to add meal to offered list in chef in database: \" + e.getMessage());\n                                                    }\n                                                });\n                                    }\n                                } else {\n                                    App.MEAL_HANDLER.handleActionFailure(ADD_MEAL_TO_OFFERED_LIST, \"Failed to retrieve chef's meals\");\n                                }\n                            }\n                        });\n\n            } catch (Exception e) {\n                App.MEAL_HANDLER.handleActionFailure(ADD_MEAL_TO_OFFERED_LIST, \"Failed to add meal to offered list in chef in database: \" + e.getMessage());\n            }\n        } else {\n            // if Preconditions fail\n            App.MEAL_HANDLER.handleActionFailure(ADD_MEAL_TO_OFFERED_LIST, \"Invalid object value for mealId\");\n        }\n    }\n\n\n    /**\n     * Set isOffered property to false to a meal in a specific chef's list of meals in Firebase\n     * @param mealId The mealId of meal to be updated\n     */\n    public void removeMealFromOfferedList(String mealId){\n\n        if (Preconditions.isNotNull(mealId)) {\n            try {\n                // ensure a chef is logged in & get the chef instance\n                Chef chef = (Chef) App.getUser();\n                // Set isOffered to true in chef's meals in firebase\n                database.collection(MEALS_COLLECTION)   // top-level meals collection\n                        .whereEqualTo(MEALS_COLLECTION_CHEF_KEY, chef.getUserId()) // get meals document of the chef\n                        .get()\n                        .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n                            @Override\n                            public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                                if (task.isSuccessful()) {\n                                    for (QueryDocumentSnapshot document : task.getResult()) {\n\n                                        database.collection(MEALS_COLLECTION)\n                                                .document(document.getId())\n                                                .collection(CHEF_MEALS_COLLECTION)\n                                                .document(mealId)\n                                                .update(\"isOffered\", false)\n                                                .addOnSuccessListener(new OnSuccessListener<Void>() {\n                                                    @Override\n                                                    public void onSuccess(Void aVoid) {\n                                                        App.MEAL_HANDLER.handleActionSuccess(REMOVE_MEAL_FROM_OFFERED_LIST, mealId);\n                                                    }\n                                                })\n                                                .addOnFailureListener(new OnFailureListener() {\n                                                    @Override\n                                                    public void onFailure(@NonNull Exception e) {\n                                                        App.MEAL_HANDLER.handleActionFailure(REMOVE_MEAL_FROM_OFFERED_LIST, \"Failed to remove meal from offered list in database: \" + e.getMessage());\n                                                    }\n                                                });\n                                    }\n                                } else {\n                                    App.MEAL_HANDLER.handleActionFailure(REMOVE_MEAL_FROM_OFFERED_LIST, \"Error getting chef's meals\");\n                                }\n                            }\n                        });\n\n            } catch (Exception e) {\n                App.MEAL_HANDLER.handleActionFailure(REMOVE_MEAL_FROM_OFFERED_LIST, \"Unable to retrieve a Chef: \" + e.getMessage());\n            }\n        } else {\n            // if Preconditions fail\n            App.MEAL_HANDLER.handleActionFailure(REMOVE_MEAL_FROM_OFFERED_LIST, \"Invalid object value for mealID\");\n        }\n    }\n\n    /**\n     * Get meal from Firebase given the mealId AND chefId\n     * @param mealId The mealId of meal\n     */\n    public void getMealById (String mealId, String chefId) {\n\n        database.collection(MEALS_COLLECTION + \"/\" + chefId + \"/\" + CHEF_MEALS_COLLECTION)\n                .document(mealId)\n                .get()\n                .addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {\n                    @Override\n                    public void onComplete(@NonNull Task<DocumentSnapshot> task) {\n                        if (task.isSuccessful()) {\n                            DocumentSnapshot document = task.getResult();\n                            if (document.exists() && document.getData() != null) {\n                                try  {\n                                    Meal meal = makeMealFromFirebase(document);\n                                    // set the meal id\n                                    meal.setMealID(document.getId());\n                                    App.MEAL_HANDLER.handleActionSuccess(GET_MEAL_BY_ID, meal);\n                                } catch (Exception e) {\n                                    App.MEAL_HANDLER.handleActionFailure(GET_MEAL_BY_ID, \"Error making a meal from data retrieved\");\n                                }\n                            } else {\n                                App.MEAL_HANDLER.handleActionFailure(GET_MEAL_BY_ID, \"Error getting the meal for given id\");\n                            }\n                        } else {\n                            App.MEAL_HANDLER.handleActionFailure(GET_MEAL_BY_ID, \"Error getting chef's meals\");\n                        }\n                    }\n                });\n    }\n\n    /**\n     * Set meals list to specific chef locally using App instance user\n     */\n    public void getMeals(){\n        try {\n            Chef chef = (Chef) App.getUser();\n            database.collection(MEALS_COLLECTION)   // top-level meals collection\n                    .whereEqualTo(MEALS_COLLECTION_CHEF_KEY, chef.getUserId()) // get meals document of the chef\n                    .get()\n                    .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n                        @Override\n                        public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                            if (task.isSuccessful()) {\n                                for (QueryDocumentSnapshot document : task.getResult()) {\n\n                                    database.collection(MEALS_COLLECTION)\n                                            .document(document.getId())\n                                            .collection(CHEF_MEALS_COLLECTION)\n                                            .get()\n                                            .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n                                                @Override\n                                                public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                                                    if (task.isSuccessful()) {\n                                                        Map<String, Meal> meals = new HashMap<String, Meal>();\n                                                        Meal meal;\n                                                        for (QueryDocumentSnapshot document : task.getResult()) {\n                                                            meal = makeMealFromFirebase(document);\n                                                            // set the meal id\n                                                            meal.setMealID(document.getId());\n                                                            meals.put(document.getId(), meal);\n                                                        }\n                                                        App.MEAL_HANDLER.handleActionSuccess(GET_MENU, meals);\n                                                    } else {\n                                                        Log.d(TAG, \"Error getting documents: \", task.getException());\n                                                        App.MEAL_HANDLER.handleActionFailure(GET_MENU, \"Failed to retrieve meals from firebase\");\n                                                    }\n                                                }\n                                            });\n                                }\n                            }\n                        }\n                    });\n        } catch (Exception e) {\n            App.MEAL_HANDLER.handleActionFailure(GET_MENU, \"Failed to get menu: \" + e.getMessage());\n        }\n    }\n\n    /**\n     * Set meals list to specific chef locally using chefID\n     */\n    public void loadChefMeals(LoginScreen loginScreen){\n        try {\n            Chef chef = (Chef) App.getUser();\n            database.collection(MEALS_COLLECTION)   // top-level meals collection\n                    .whereEqualTo(MEALS_COLLECTION_CHEF_KEY, chef.getUserId()) // get meals document of the chef\n                    .get()\n                    .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n                        @Override\n                        public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                            if (task.isSuccessful()) {\n                                // check if chef has any meals currently\n                                if (task.getResult() == null || task.getResult().isEmpty()) {\n                                    Log.e(\"loadMeals\", \"Chef has no meals currently\");\n                                    loginScreen.showNextScreen();\n                                } else {\n                                    for (QueryDocumentSnapshot document : task.getResult()) {\n                                        //Log.e(\"loadMeals\", \"creating meals\");\n                                        database.collection(MEALS_COLLECTION)\n                                                .document(document.getId())\n                                                .collection(CHEF_MEALS_COLLECTION)\n                                                .get()\n                                                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n                                                    @Override\n                                                    public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                                                        if (task.isSuccessful()) {\n                                                            Map<String, Meal> meals = new HashMap<String, Meal>();\n                                                            Meal meal;\n                                                            for (QueryDocumentSnapshot document : task.getResult()) {\n                                                                meal = makeMealFromFirebase(document);\n                                                                // set the meal id\n                                                                meal.setMealID(document.getId());\n                                                                meals.put(document.getId(), meal);\n                                                            }\n                                                            // add meals to Chef\n                                                            ((Chef) App.getUser()).MEALS.setMeals(meals);\n                                                            // let login screen show Chef screen\n                                                            loginScreen.showNextScreen();\n                                                        } else {\n                                                            Log.d(\"loadMeals\", \"Error getting documents: \", task.getException());\n                                                            loginScreen.dbOperationFailureHandler(UserHandler.dbOperations.USER_LOG_IN, \"Failed to retrieve meals from firebase\");\n                                                        }\n                                                    }\n                                                });\n                                    }\n                                }\n                            } else {\n                                loginScreen.dbOperationFailureHandler(UserHandler.dbOperations.USER_LOG_IN, \"Failed to load meals\");\n                                Log.e(\"loadMeals\", \"failed to load meals: \" + task.getException());\n                            }\n                        }\n                    });\n        } catch (Exception e) {\n            loginScreen.dbOperationFailureHandler(UserHandler.dbOperations.USER_LOG_IN, \"Failed to get Chef's meals\");\n            Log.e(\"loadMeals\", \"failed to load meals: \" + e.getMessage());\n        }\n    }\n\n    /**\n     * get all meals of all chefs\n     */\n    public void getAllMeals() {\n\n        Log.e(\"searchMeals\", \"Initiating request to get all meals\");\n\n        // get all documents from meals collection\n        database.collection(MEALS_COLLECTION)\n                        .get()\n                        .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n                            @Override\n                            public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                                if (task.isSuccessful()) {\n                                    // for each Meals row (which contains a chef id and a nested meals collection\n                                    for (QueryDocumentSnapshot document : task.getResult()) {\n                                        // make the next call to get Chef data\n                                        getChefForSearchMeals(document.getId(), (String) document.getData().get(\"chef\"));\n                                    }\n                                } else {\n                                    App.MEAL_HANDLER.handleActionFailure(ADD_MEALS_TO_SEARCH_LIST, \"Failed to retrieve chef from Meals: \" + task.getException());\n                                }\n                            }\n                        });\n    }\n\n    private void getChefForSearchMeals(String mealDocumentId, String chefId) {\n\n        database.collection(CHEF_COLLECTION)\n                .document(chefId)\n                .get()\n                .addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {\n                    @Override\n                    public void onComplete(@NonNull Task<DocumentSnapshot> task) {\n                        if (task.isSuccessful()) {\n                            DocumentSnapshot document = task.getResult();\n                            if (document.exists()) {\n                                if (document.getData() != null){\n                                    // if chef is suspended, we don't need to get the meals of this chef\n                                    // get value of isSuspended for check\n                                    boolean isSuspended = (Boolean) document.getData().get(\"isSuspended\");\n                                    // we load the meals only if chef is not suspended\n                                    if (!isSuspended) {\n                                        // create ChefInfo for the chef\n                                        Result<ChefInfo, String> result = getChefInfoInstance(document);\n                                        if (result.isSuccess()) {\n                                            // call next method to retrieve meals of the chef\n                                            getChefMeals(mealDocumentId, result.getSuccessObject());\n                                        } else {\n                                            App.MEAL_HANDLER.handleActionFailure(ADD_MEALS_TO_SEARCH_LIST, result.getErrorObject());\n                                        }\n                                    }\n                                }\n\n                            }\n                        } else {\n                            Log.d(TAG, \"get failed with \", task.getException());\n                        }\n                    }\n                });\n    }\n\n    private Result<ChefInfo, String> getChefInfoInstance(DocumentSnapshot document) {\n\n        try {\n            String chefName =\n                    String.valueOf(document.getData().get(\"firstName\")) +\n                            \" \"  + String.valueOf(document.getData().get(\"lastName\"));\n\n            // TODO: implement chef rating\n            // int chefRating = (Integer) document.getData().get(\"rating\");\n\n            AddressEntityModel newAddress = new AddressEntityModel();\n\n            newAddress.setStreetAddress(String.valueOf(document.getData().get(\"addressStreet\")));\n            newAddress.setCity(String.valueOf(document.getData().get(\"addressCity\")));\n            newAddress.setCountry(String.valueOf(document.getData().get(\"country\")));\n            newAddress.setPostalCode(String.valueOf(document.getData().get(\"postalCode\")));\n\n            return new Result<ChefInfo, String>(new ChefInfo(document.getId(), chefName, 4, new Address(newAddress)), null);\n        } catch (Exception e) {\n            return new Result<ChefInfo, String>(null, \"Failed to create ChefInfo: \" + e.getMessage());\n        }\n    }\n\n    private void getChefMeals(String mealDocumentId, ChefInfo chefInfo) {\n\n        Log.e(\"searchMeals\", \"Initiating request to get meals of chef: \" + chefInfo.getChefName());\n        Log.e(\"searchMeals\", \"path: \" + MEALS_COLLECTION + \"/\" + mealDocumentId + \"/\" + CHEF_MEALS_COLLECTION);\n\n        database.collection(MEALS_COLLECTION + \"/\" + mealDocumentId + \"/\" + CHEF_MEALS_COLLECTION)\n                .get()\n                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n                    @Override\n                    public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                        if (task.isSuccessful()) {\n                            List<SearchMealItem> smItems = new ArrayList<>();\n                            SearchMealItem smItem;\n                            Meal meal;\n                            if (task.getResult() == null || task.getResult().isEmpty()) {\n                                Log.e(\"searchMeals\", \"empty result\");\n                            }\n                            for (QueryDocumentSnapshot document : task.getResult()) {\n                                // check if we have a isOffered property\n                                if (document.getData().get(\"isOffered\") != null) {\n                                    // get the isOffered property's value\n                                    boolean isOffered = (Boolean) document.getData().get(\"isOffered\");\n                                    // if only the meal if offered\n                                    if (isOffered) {\n                                        // create the meal\n                                        meal = makeMealFromFirebase(document);\n                                        // set the meal id\n                                        meal.setMealID(document.getId());\n                                        // add keywords to meal instance (only need to do this when we need search meal functionality i.e., for a client)\n                                        meal.setKeywords((ArrayList<String>) document.getData().get(\"keywords\"));\n                                        // create SearchMealItem adding to it the meal and chefInfo\n                                        smItem = new SearchMealItem(meal, chefInfo);\n                                        Log.e(\"searchMeals\", \"adding meal: \" + meal.getName());\n                                        // store current SearchMealItem in our list\n                                        smItems.add(smItem);\n                                    }\n                                }\n                            }\n                            Log.e(\"searchMeals\", \"updating meals\");\n                            // pass list containing SearchMealItems to handler so our App's search meal list can be updated\n                            App.MEAL_HANDLER.handleActionSuccess(ADD_MEALS_TO_SEARCH_LIST, smItems);\n                        } else {\n                            Log.d(\"searchMeals\", \"Error getting documents: \", task.getException());\n                            App.MEAL_HANDLER.handleActionFailure(ADD_MEALS_TO_SEARCH_LIST, \"Failed to retrieve meals from firebase\");\n                        }\n                    }\n                });\n    }\n\n    protected Meal makeMealFromFirebase(DocumentSnapshot document) {\n\n        if (document.getData() == null) {\n            throw new NullPointerException(\"makeClientFromFirebase: invalid document object\");\n        }\n\n        MealEntityModel newMeal = new MealEntityModel();\n\n        newMeal.setMealID(document.getId());\n        newMeal.setName(String.valueOf(document.getData().get(\"name\")));\n        newMeal.setChefID(String.valueOf(document.getData().get(\"chefId\")));\n        newMeal.setCuisineType(String.valueOf(document.getData().get(\"cuisineType\")));\n        newMeal.setMealType(String.valueOf(document.getData().get(\"mealType\")));\n        newMeal.setIngredients(String.valueOf(document.getData().get(\"ingredients\")));\n        newMeal.setAllergens((ArrayList<String>) (document.getData().get(\"allergens\")));\n        newMeal.setDescription(String.valueOf(document.getData().get(\"description\")));\n        newMeal.setOffered((Boolean) document.getData().get(\"isOffered\"));\n        newMeal.setPrice((Double) document.getData().get(\"price\"));\n\n        return new Meal(newMeal);\n\n    }\n\n    private Map mealToMapConversion(Meal meal){\n\n        Map<String, Object> mealMap = new HashMap<>();\n\n        mealMap.put(\"name\", meal.getName());\n        mealMap.put(\"mealId\", meal.getMealID());\n        mealMap.put(\"chefID\", meal.getChefID());\n        mealMap.put(\"cuisineType\", meal.getCuisineType());\n        mealMap.put(\"mealType\", meal.getMealType());\n        mealMap.put(\"ingredients\", meal.getIngredients());\n        mealMap.put(\"allergens\", meal.getAllergens());\n        mealMap.put(\"description\", meal.getDescription());\n        mealMap.put(\"isOffered\", meal.isOffered());\n        mealMap.put(\"price\", meal.getPrice());\n\n        return mealMap;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/mealer_project/data/sources/actions/MealActions.java b/app/src/main/java/com/example/mealer_project/data/sources/actions/MealActions.java
--- a/app/src/main/java/com/example/mealer_project/data/sources/actions/MealActions.java	(revision 914eaea110be866bb4667009849e18471c103326)
+++ b/app/src/main/java/com/example/mealer_project/data/sources/actions/MealActions.java	(date 1669830358358)
@@ -84,7 +84,7 @@
      * Add meal to list of meals in Firebase
      * @param meal The meal to be added
      */
-    public void addMeal(Meal meal) {
+    public void caddMeal(Meal meal) {
 
         if (Preconditions.isNotNull(meal)) {
             // confirm a Chef is logged in and get the chef
Index: app/src/main/java/com/example/mealer_project/data/models/meals/Meal2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/mealer_project/data/models/meals/Meal2.java b/app/src/main/java/com/example/mealer_project/data/models/meals/Meal2.java
new file mode 100644
--- /dev/null	(date 1669830358352)
+++ b/app/src/main/java/com/example/mealer_project/data/models/meals/Meal2.java	(date 1669830358352)
@@ -0,0 +1,42 @@
+package com.example.mealer_project.data.models.meals;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class Meal2 {
+
+    String name;
+    String cuisine;
+    String mealType;
+    Sri
+
+    public Meal2(String name, String cuisine, String mealType) {
+        this.name = name;
+        this.cuisine = cuisine;
+        this.mealType = mealType;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getCuisine() {
+        return cuisine;
+    }
+
+    public void setCuisine(String cuisine) {
+        this.cuisine = cuisine;
+    }
+
+    public String getMealType() {
+        return mealType;
+    }
+
+    public void setMealType(String mealType) {
+        this.mealType = mealType;
+    }
+}
Index: app/src/main/java/com/example/mealer_project/data/models/meals/Meals.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.mealer_project.data.models.meals;\n\nimport android.util.Log;\n\nimport androidx.annotation.NonNull;\n\nimport com.example.mealer_project.data.models.meals.Meal;\nimport com.example.mealer_project.utils.Preconditions;\nimport com.example.mealer_project.utils.Response;\nimport com.example.mealer_project.utils.Result;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class Meals {\n\n    // Store Meals in a Map<MealID, Meal> key-value pairs\n    private Map<String, Meal> meals;\n\n    /**\n     * Default constructor initializes a HashMap for storing Meals\n     */\n    public Meals() {\n        this.meals = new HashMap<>(); //<MealID, Meal> key-value pair\n    }\n\n    /**\n     * Retrieve a meal from all meals of the Chef by meal ID\n     * @param mealID representing the ID of the meal\n     * @return a Result object containing the meal is successful in getting the associated meal, else error message\n     */\n    public Result<Meal, String> getMeal(@NonNull String mealID) {\n        // guard-clause\n        if (Preconditions.isNotEmptyString(mealID)) {\n            // check if meal exists\n            if (this.meals.get(mealID) != null) {\n                return new Result<>(this.meals.get(mealID), null);\n            } else {\n                return new Result<>(null, \"Could not find any meal for the provided meal ID\");\n            }\n        } else {\n            return new Result<>(null, \"Invalid meal ID provided\");\n        }\n    }\n\n    public void setMeals(@NonNull Map<String, Meal> mealsData) {\n        this.meals = mealsData;\n    }\n\n    /**\n     * Add a new meal to the chef's list of meals (menu)\n     * @param newMeal Meal to be added\n     */\n    public Response addMeal(@NonNull Meal newMeal) {\n        // guard-clause\n        // meal must have a valid id which will be used as a key\n        if (Preconditions.isNotEmptyString(newMeal.getMealID())) {\n            // check if meal already exists\n            if (this.meals.get(newMeal.getMealID()) != null) {\n                return new Response(false, \"Meal with same ID already exists! Use updateMeal to update an existing meal\");\n            }\n            // add the new meal\n            this.meals.put(newMeal.getMealID(), newMeal);\n            // return success\n            return new Response(true);\n        } else {\n            return new Response(false, \"Meal does not have a valid ID\");\n        }\n    }\n\n    /**\n     * Add a meal to the chef's offered meal\n     * @param mealId ID of the meal that needs to be added to the menu\n     * @return Response object indicating success, or failure (with an error message)\n     */\n    public Response addMealToOfferedList(@NonNull String mealId) {\n        // guard-clause\n        if (Preconditions.isNotEmptyString(mealId)) {\n            // check if meal exists and has a valid object\n            if (this.meals.get(mealId) != null) {\n                // add meal to the menu\n                this.meals.get(mealId).setOffered(true);\n                // return success\n                return new Response(true);\n            } else {\n                return new Response(false, \"Could not find the any meal for the provided ID\");\n            }\n        } else {\n            return new Response(false, \"Meal does not have a valid ID\");\n        }\n    }\n\n    /**\n     * Remove a meal from the list of all meals added by a Chef\n     * @param mealId ID of the meal to be removed\n     */\n    public Response removeMeal(@NonNull String mealId) {\n        // guard-clause\n        if (Preconditions.isNotEmptyString(mealId)) {\n            // check if meal exists\n            if (this.meals.get(mealId) != null) {\n                // remove the meal\n                this.meals.remove(mealId);\n                // return operation success\n                return new Response(true);\n            } else {\n                return new Response(false, \"Could not find any meal for the provided meal ID\");\n            }\n        } else {\n            return new Response(false, \"Invalid meal ID provided\");\n        }\n    }\n\n    /**\n     * Remove a meal from Chef's offered meals\n     * @param mealId ID of the meal to be removed\n     */\n    public Response removeMealFromOfferedList(@NonNull String mealId) {\n        // guard-clause\n        if (Preconditions.isNotEmptyString(mealId)) {\n            // check if meal exists\n            if (this.meals.get(mealId) != null) {\n                // remove meal from menu\n                this.meals.get(mealId).setOffered(false);\n                // return operation success\n                return new Response(true);\n            } else {\n                return new Response(false, \"Could not find any meal for the provided meal ID\");\n            }\n        } else {\n            return new Response(false, \"Invalid meal ID provided\");\n        }\n    };\n\n    /**\n     * Update an existing meal\n     * @param meal meal instance, must have a valid meal ID\n     * @return Response indicating operation success or failure\n     */\n    public Response updateMeal(@NonNull Meal meal) {\n        // guard-clause\n        // meal must have a valid id which will be used as a key\n        if (Preconditions.isNotEmptyString(meal.getMealID())) {\n            // check if meal doesn't exists\n            if (!this.meals.containsKey(meal.getMealID())) {\n                return new Response(false, \"Could not find a meal for the given meal ID\");\n            }\n            // update the meal\n            this.meals.put(meal.getMealID(), meal);\n            // return success\n            return new Response(true);\n        } else {\n            return new Response(false, \"Meal does not have a valid ID\");\n        }\n    }\n\n    /**\n     * Method to retrieve a map object containing meals which are currently being offered by Chef\n     * @return a Map containing Meal ID's as keys and Meal objects as values\n     */\n    public Map<String, Meal> getOfferedMeals() {\n        // map to store the result\n        HashMap<String, Meal> offeredMeals = new HashMap<>();\n        // filter and add offered meals to above map\n        for (Meal meal : this.meals.values()) {\n            if (meal.isOffered()) {\n                offeredMeals.put(meal.getMealID(), meal);\n            }\n        }\n        // return the result\n        return offeredMeals;\n    }\n\n    /**\n     * Method to retrieve a map object containing all meals added by the Chef\n     * @return a Map containing Meal ID's as keys and Meal objects as values\n     */\n    public Map<String, Meal> getMenu() {\n        return this.meals;\n    };\n\n    /**\n     * Method to retrieve a list containing all meals added by the Chef\n     * @return a List containing Meal objects\n     */\n    public List<Meal> getListOfMeals() {\n        return new ArrayList<>(this.meals.values());\n    };\n\n    /**\n     * Method to retrieve a list containing meals currently offered by the Chef\n     * @return a List containing Meal objects\n     */\n    public List<Meal> getListOfOfferedMeals() {\n        return new ArrayList<>(getOfferedMeals().values());\n    };\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/mealer_project/data/models/meals/Meals.java b/app/src/main/java/com/example/mealer_project/data/models/meals/Meals.java
--- a/app/src/main/java/com/example/mealer_project/data/models/meals/Meals.java	(revision 914eaea110be866bb4667009849e18471c103326)
+++ b/app/src/main/java/com/example/mealer_project/data/models/meals/Meals.java	(date 1669830475489)
@@ -18,6 +18,7 @@
 
     // Store Meals in a Map<MealID, Meal> key-value pairs
     private Map<String, Meal> meals;
+    List<Meal> allMeals = new ArrayList<>();
 
     /**
      * Default constructor initializes a HashMap for storing Meals
