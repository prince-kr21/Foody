Index: app/src/main/java/com/example/mealer_project/ui/screens/ChefScreen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.mealer_project.ui.screens;\n\nimport android.app.AlertDialog;\nimport android.content.DialogInterface;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.ImageView;\nimport android.widget.ListView;\nimport android.widget.TextView;\n\nimport com.example.mealer_project.R;\nimport com.example.mealer_project.app.App;\nimport com.example.mealer_project.data.handlers.OrderHandler;\nimport com.example.mealer_project.data.models.Chef;\nimport com.example.mealer_project.data.models.Order;\nimport com.example.mealer_project.data.models.User;\nimport com.example.mealer_project.data.models.meals.Meal;\nimport com.example.mealer_project.ui.core.StatefulView;\nimport com.example.mealer_project.ui.core.UIScreen;\nimport com.example.mealer_project.ui.screens.completed_orders.CompletedOrdersScreen;\nimport com.example.mealer_project.ui.screens.meals.MealsListScreen;\nimport com.example.mealer_project.ui.screens.pending_orders.PendingOrdersScreen;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ChefScreen extends UIScreen implements StatefulView {\n    // Variable Declaration\n    TextView editText;\n\n    /**\n     * the map that contains the current CHEF's Orders\n     */\n    private List<Order> orderData;\n\n    /**\n     * the list that will hold the orders\n     */\n    private List<Order> orders;\n\n    /**\n     * the array adapter for the list view of the orders in progress\n     */\n    private OrdersInProgressAdapter ordersInProgressAdapter;\n\n    //----------------------------------------------------------------------------------------------------------\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_chef_screen);\n        App.getAppInstance().setOrdersInProgressScreen(this);\n\n        // HEADER\n        editText = (TextView) findViewById(R.id.welcome_message_chef);\n        User currentUser = App.getAppInstance().getUser();\n        if (App.getAppInstance().isUserAuthenticated()) { // Change text to proper welcome message when opened\n            setWelcomeMessage(\"Welcome \" + currentUser.getFirstName() + \" \" + currentUser.getLastName() + \", you're logged in as a CHEF!\");\n        }\n\n        // Initialization\n        attachOnClickListeners();\n\n        // Process: loading the in progress orders\n        loadOrdersInProgress();\n\n        // Process: populate the Orders ListView\n        populateOrdersInProgress();\n\n    }\n\n    /**\n     * retrieves the current chef's orders in progress\n     */\n    private void loadOrdersInProgress() {\n\n        // Process: Check if current user is a chef\n        if (App.getUser() instanceof Chef) { // is a CHEF\n            // Initialization: setting ordersData to the list\n            this.orderData = ((Chef) App.getUser()).ORDERS.getOrdersInProgress();\n        } else { // not a chef -> error-handling\n            Log.e(\"ChefScreen\", \"Current logged-in user is not a CHEF\");\n        }\n    }\n\n    /**\n     * populates the list with all in progress meals that will be displayed\n     */\n    private void populateOrdersInProgress() {\n\n        // variable declaration\n        this.orders = new ArrayList<Order>();\n        ListView ordersInProgressList = findViewById(R.id.ordersInProgress);\n\n        // Initialization: setting adapter\n        ordersInProgressAdapter = new OrdersInProgressAdapter(this, R.layout.orders_in_progress, this.orders);\n\n        // Process: attach adapter to ListView\n        ordersInProgressList.setAdapter(ordersInProgressAdapter);\n\n        // Process: if theres no meals, display no meals in progress text\n        if (orderData.size() == 0) {\n            TextView noMealsInProgress = (TextView) findViewById(R.id.noOrdersInProgress);\n            noMealsInProgress.setVisibility(View.VISIBLE);\n        }\n\n        // Process: loop through the map of data for the orders in progress\n        for (Order order : this.orderData) {\n            ordersInProgressAdapter.add(order); // adds orderData to the list\n        }\n    }\n\n    /**\n     * this helper method populates the Orders list after a change has been made\n     */\n    private void repopulatePendingOrdersList() {\n\n        ordersInProgressAdapter.clear(); //removing all previous data\n\n        // Process: if theres no meals, display no meals in progress text\n        if (orderData.size() == 0) {\n            TextView noMealsInProgress = (TextView) findViewById(R.id.noOrdersInProgress);\n            noMealsInProgress.setVisibility(View.VISIBLE);\n        } else {\n            TextView noMealsInProgress = (TextView) findViewById(R.id.noOrdersInProgress);\n            noMealsInProgress.setVisibility(View.INVISIBLE);\n        }\n\n        // Process: looping through the map of data\n        for (Order order : this.orderData) {\n            ordersInProgressAdapter.add(order); //adding the orderData to the list\n        }\n\n    }\n\n    public OrdersInProgressAdapter getOrdersInProgressAdapter() {\n        return ordersInProgressAdapter;\n    }\n\n    public void updateAdapter() {\n        loadOrdersInProgress();\n        repopulatePendingOrdersList();\n\n        ordersInProgressAdapter.notifyDataSetChanged();\n    }\n\n    /**\n     * Sets the appropriate welcome message to the user\n     *\n     * @param message\n     */\n    private void setWelcomeMessage(String message) {\n        editText.setText(message, TextView.BufferType.EDITABLE);\n    }\n\n    /**\n     * OnClick method for buttons\n     */\n    private void attachOnClickListeners() {\n\n        // Meal buttons\n        Button menuButton = (Button) findViewById(R.id.viewMenuButton);\n        Button offeredMealsButton = (Button) findViewById(R.id.viewOfferedButton);\n        Button addButton = (Button) findViewById(R.id.addMealButton);\n\n        //Profile Button\n        Button profileButton = (Button) findViewById(R.id.chefProfile);\n\n        // Order buttons\n        Button viewOrder = (Button) findViewById(R.id.viewCompletedOrdersButton);\n        Button viewPendingOrder = (Button) findViewById(R.id.viewPendingOrdersButton);\n        // View profile button\n        ImageView viewChefProfile = (ImageView) findViewById(R.id.mealer_logo);\n\n        // create alert dialog\n        AlertDialog.Builder builder = new AlertDialog.Builder(this);\n        builder.setTitle(\"NOTICE\");\n        // set the icon for the alert dialog\n        builder.setIcon(R.drawable.mealer);\n\n        menuButton.setOnClickListener(new Button.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n<<<<<<< HEAD\n                List<Meal> listOfMeals = ((Chef) App.getUser()).MEALS.getListOfMeals();\n                if(listOfMeals.size() != 0) {\n                    startActivity(new Intent(getApplicationContext(), MealsListScreen.class));\n                } else {\n                    displayErrorToast(\"You have no menu items!\");\n                }\n=======\n                // if chef has no meals\n                if (App.getChef().MEALS.getMenu().size() == 0 || App.getChef().MEALS.getMenu() == null) {\n\n                    builder.setMessage(\"You have no meals!\");\n                    builder.setPositiveButton(\"Okay\",\n                            new DialogInterface.OnClickListener() {\n                                @Override\n                                public void onClick(DialogInterface dialog, int which) {\n                                }\n                            });\n                    AlertDialog dialog = builder.create();\n                    dialog.show();\n                } else\n                    // chef has meals\n                    startActivity(new Intent(getApplicationContext(), MealsListScreen.class));\n>>>>>>> 363b3e88d28aac91d9db8fcb5999de39976dbce3\n            }\n        });\n\n        offeredMealsButton.setOnClickListener(new Button.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n<<<<<<< HEAD\n                List<Meal> listOfOfferedMeals = ((Chef) App.getUser()).MEALS.getListOfOfferedMeals();\n                if(listOfOfferedMeals.size() != 0) {\n                    Intent intent = new Intent(getApplicationContext(), MealsListScreen.class); // initialize a new intent\n                    intent.putExtra(MealsListScreen.MEALS_TYPE_ARG_KEY, MealsListScreen.MEALS_TYPE.OFFERED_MEALS.toString()); // specify that we want to display offered meals\n                    startActivity(intent); // display the offered meals list\n                } else {\n                    displayErrorToast(\"You have no offered menu items\");\n                }\n\n=======\n                // if chef has no offered meals\n                if (App.getChef().MEALS.getOfferedMeals().size() == 0 || App.getChef().MEALS.getOfferedMeals() == null) {\n                    builder.setMessage(\"You have no offered meals!\");\n                    builder.setPositiveButton(\"Okay\",\n                            new DialogInterface.OnClickListener() {\n                                @Override\n                                public void onClick(DialogInterface dialog, int which) {\n                                }\n                            });\n                    AlertDialog dialog = builder.create();\n                    dialog.show();\n                } else {\n                    // initialize a new intent\n                    Intent intent = new Intent(getApplicationContext(), MealsListScreen.class);\n                    // specify that we want to display offered meals\n                    intent.putExtra(MealsListScreen.MEALS_TYPE_ARG_KEY, MealsListScreen.MEALS_TYPE.OFFERED_MEALS.toString());\n                    // display the offered meals list\n                    startActivity(intent);\n                }\n>>>>>>> 363b3e88d28aac91d9db8fcb5999de39976dbce3\n            }\n        });\n\n        addButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                startActivity(new Intent(getApplicationContext(), NewMealScreen.class)); //show new meal screen\n            }\n        });\n\n        profileButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                startActivity(new Intent(getApplicationContext(), ChefInfoScreen.class)); //Show Chef's Profile\n            }\n        });\n\n        viewOrder.setOnClickListener(new Button.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if (((Chef) App.getUser()).ORDERS.getCompletedOrders().size() != 0)\n                    startActivity(new Intent(getApplicationContext(), CompletedOrdersScreen.class)); //show completed orders\n                else {\n                    builder.setMessage(\"You have no completed orders!\");\n                    builder.setPositiveButton(\"Okay\",\n                            new DialogInterface.OnClickListener() {\n                                @Override\n                                public void onClick(DialogInterface dialog, int which) {\n                                }\n                            });\n                    AlertDialog dialog = builder.create();\n                    dialog.show();\n                }\n            }\n        });\n\n        viewPendingOrder.setOnClickListener(new Button.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if (((Chef) App.getUser()).ORDERS.getPendingOrders().size() != 0)\n                    startActivity(new Intent(getApplicationContext(), PendingOrdersScreen.class)); //show pending orders\n                else {\n                    builder.setMessage(\"You have no pending orders!\");\n                    builder.setPositiveButton(\"Okay\",\n                            new DialogInterface.OnClickListener() {\n                                @Override\n                                public void onClick(DialogInterface dialog, int which) {\n                                }\n                            });\n                    AlertDialog dialog = builder.create();\n                    dialog.show();\n                }\n            }\n        });\n\n        viewChefProfile.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                startActivity(new Intent(getApplicationContext(), ChefInfoScreen.class));\n            }\n        });\n    }\n\n    /**\n     * When the user clicks the logout button, it will take back to the intro screen\n     *\n     * @param view\n     */\n    public void clickLogout(View view) {\n        // handle user logout\n        App.getAppInstance().logoutUser();\n        // take user back to intro screen\n        Intent intent = new Intent(this, IntroScreen.class);\n        startActivity(intent);\n    }\n\n    @Override\n    public void updateUI() {\n    }\n\n    @Override\n    public void showNextScreen() {\n\n    }\n\n    @Override\n    public void dbOperationSuccessHandler(Object dbOperation, Object payload) {\n        if (dbOperation == OrderHandler.dbOperations.UPDATE_ORDER) {\n\n            // Output: successfully completed an order\n            displayErrorToast(\"Successfully completed order!\");\n\n        } else { // other op\n            displayErrorToast((String) payload);\n        }\n        updateAdapter();\n    }\n\n    @Override\n    public void dbOperationFailureHandler(Object dbOperation, Object payload) {\n        if (dbOperation == OrderHandler.dbOperations.UPDATE_ORDER) {\n\n            // Output: failed to update order\n            displayErrorToast(\"Failed to update order!\");\n\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/mealer_project/ui/screens/ChefScreen.java b/app/src/main/java/com/example/mealer_project/ui/screens/ChefScreen.java
--- a/app/src/main/java/com/example/mealer_project/ui/screens/ChefScreen.java	
+++ b/app/src/main/java/com/example/mealer_project/ui/screens/ChefScreen.java	
@@ -183,14 +183,14 @@
         menuButton.setOnClickListener(new Button.OnClickListener() {
             @Override
             public void onClick(View view) {
-<<<<<<< HEAD
+
                 List<Meal> listOfMeals = ((Chef) App.getUser()).MEALS.getListOfMeals();
                 if(listOfMeals.size() != 0) {
                     startActivity(new Intent(getApplicationContext(), MealsListScreen.class));
                 } else {
                     displayErrorToast("You have no menu items!");
                 }
-=======
+
                 // if chef has no meals
                 if (App.getChef().MEALS.getMenu().size() == 0 || App.getChef().MEALS.getMenu() == null) {
 
@@ -206,14 +206,14 @@
                 } else
                     // chef has meals
                     startActivity(new Intent(getApplicationContext(), MealsListScreen.class));
->>>>>>> 363b3e88d28aac91d9db8fcb5999de39976dbce3
+
             }
         });
 
         offeredMealsButton.setOnClickListener(new Button.OnClickListener() {
             @Override
             public void onClick(View view) {
-<<<<<<< HEAD
+
                 List<Meal> listOfOfferedMeals = ((Chef) App.getUser()).MEALS.getListOfOfferedMeals();
                 if(listOfOfferedMeals.size() != 0) {
                     Intent intent = new Intent(getApplicationContext(), MealsListScreen.class); // initialize a new intent
